package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_base {

}






    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_bad();
        baseObject.action(data);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_22a.badPublicStatic) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_66b()).badSink(dataArray);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    private void badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        dataBad = data;
        badSink(request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_71b()).badSink((Object) data);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54e()).badSink(data, request, response);
    }





    public void badSink(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54b()).badSink(data);
    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__database_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_51b()).badSink(data, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_66b()).badSink(dataArray);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_53c()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_22a.badPublicStatic) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_22b()).badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_base {

}






    public void bad() throws Throwable {
        String data;
        while (true) {
            data = System.getProperty("user.home");
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_51b()).badSink(data, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        while (true) {
            data = request.getParameter("name");
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_base {

}






    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_22a.badPublicStatic) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_73b()).badSink(dataLinkedList);
    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        dataBad = data;
        badSink();
    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_66b()).badSink(dataArray, request, response);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_52c()).badSink(data, request, response);
    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_bad();
        baseObject.action(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_51b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_67b()).badSink(dataContainer);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_53c()).badSink(data);
    }





    public void badSink(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_53d()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_52c()).badSink(data);
    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        badSink(data);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54c()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_base {

}






    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_53b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_72b()).badSink(dataVector);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        dataBad = data;
        badSink();
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_61b()).badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_72b()).badSink(dataVector);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_74b()).badSink(dataHashMap);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_67b()).badSink(dataContainer, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_53c()).badSink(data, request, response);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_52c()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        badSink(data);
    }





    public void badSink(String dataArray[], HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_52c()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54d()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_53b()).badSink(data);
    }





    private String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__File_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__File_81_bad();
        baseObject.action(data);
    }





    public void badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_base {

}






    public void badSink(String dataArray[], HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_53d()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_72b()).badSink(dataVector);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_53d()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_68b()).badSink();
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54e()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_53c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__File_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_22a.badPublicStatic) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = System.getProperty("user.home");
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        data = System.getProperty("user.home");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_68b()).badSink();
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateTrue) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_71b()).badSink((Object) data);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_53b()).badSink(data);
    }





    public void badSink(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_52b()).badSink(data);
    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_22a.badPublicStatic) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_74b()).badSink(dataHashMap, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_71b()).badSink((Object) data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive == 5) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        return data;
    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        badSink(data);
    }





    public void bad() throws Throwable {
        data = System.getenv("ADD");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_68b()).badSink();
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_67b()).badSink(dataContainer, request, response);
    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        return data;
    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_52b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_bad();
        baseObject.action(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_67b()).badSink(dataContainer);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_53d()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_73b()).badSink(dataLinkedList);
    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_53c()).badSink(data);
    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__File_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__File_81_base {

}






    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_53d()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__database_22a.badPublicStatic) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54d()).badSink(data, request, response);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_52b()).badSink(data, request, response);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_53c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_53c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__Environment_22a.badPublicStatic) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_51b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54d()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54b()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54c()).badSink(data);
    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        badSink(data, request, response);
    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_52b()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_73b()).badSink(dataLinkedList);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_bad();
        baseObject.action(data);
    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_68b()).badSink();
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_53c()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_66b()).badSink(dataArray);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_68b()).badSink();
    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_73b()).badSink(dataLinkedList);
    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_53d()).badSink(data, request, response);
    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__Property_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        dataBad = data;
        badSink();
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_53b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        dataBad = data;
        badSink();
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54d()).badSink(data);
    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__Property_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54c()).badSink(data);
    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        return data;
    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_71b()).badSink((Object) data);
    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_22a.badPublicStatic) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_74b()).badSink(dataHashMap);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_73b()).badSink(dataLinkedList, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54e()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_67b()).badSink(dataContainer);
    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54b()).badSink(data, request, response);
    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        dataBad = data;
        badSink();
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = request.getParameter("name");
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54d()).badSink(data);
    }





    private void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        badSink(data, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_bad();
        baseObject.action(data, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_53b()).badSink(data, request, response);
    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_52b()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = System.getenv("ADD");
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54b()).badSink(data);
    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_52b()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_74b()).badSink(dataHashMap);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54e()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_74b()).badSink(dataHashMap, request, response);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_53d()).badSink(data);
    }





    private String badSource() throws Throwable {
        String data;
        data = System.getenv("ADD");
        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_67a.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_73b()).badSink(dataLinkedList);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_72b()).badSink(dataVector);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54b()).badSink(data);
    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_71b()).badSink((Object) data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_53b()).badSink(data, request, response);
    }





    public void badSink(Object dataObject, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_52c()).badSink(data, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54e()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54c()).badSink(data);
    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_67a.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54d()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54e()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_52b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_73b()).badSink(dataLinkedList);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_52c()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54e()).badSink(data);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54d()).badSink(data, request, response);
    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_72b()).badSink(dataVector);
    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_72b()).badSink(dataVector, request, response);
    }





    public void bad() throws Throwable {
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_68b()).badSink();
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = System.getProperty("user.home");
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54b()).badSink(data);
    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_72b()).badSink(dataVector);
    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_74b()).badSink(dataHashMap);
    }





    public void badSink(Object dataObject, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_72b()).badSink(dataVector);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_73b()).badSink(dataLinkedList);
    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_53c()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_bad();
        baseObject.action(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_68b()).badSink(request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_73b()).badSink(dataLinkedList, request, response);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__File_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_66b()).badSink(dataArray);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_71b()).badSink((Object) data, request, response);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54d()).badSink(data);
    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (true) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_52b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_53b()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54d()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        dataBad = data;
        badSink(request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_66b()).badSink(dataArray);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_53d()).badSink(data);
    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_73b()).badSink(dataLinkedList);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54e()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_68b()).badSink();
    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_52b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__File_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54d()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_67b()).badSink(dataContainer);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_71b()).badSink((Object) data, request, response);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_53d()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        while (true) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_51b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_52b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = System.getProperty("user.home");
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_72b()).badSink(dataVector);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_53c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = System.getenv("ADD");
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        dataBad = data;
        badSink();
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_52c()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__File_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_66b()).badSink(dataArray);
    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__Property_22a.badPublicStatic) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__database_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public String badSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_22a.badPublicStatic) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_51b()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_73b()).badSink(dataLinkedList);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_71b()).badSink((Object) data, request, response);
    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__database_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54c()).badSink(data);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54c()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_51b()).badSink(data);
    }





    public void badSink(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_74b()).badSink(dataHashMap);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (true) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__File_22a.badPublicStatic) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = System.getenv("ADD");
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_22b()).badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_61b()).badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_base {

}






    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        dataBad = data;
        badSink();
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_74b()).badSink(dataHashMap);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_53c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public String badSource() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        return data;
    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_52c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_67b()).badSink(dataContainer);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_52b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_53b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_67b()).badSink(dataContainer, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_52b()).badSink(data);
    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_53b()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_base {

}






    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54b()).badSink(data, request, response);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_bad();
        baseObject.action(data);
    }





    private void badSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        dataBad = data;
        badSink(request, response);
    }





    private String badSource() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_51b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_53b()).badSink(data);
    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__File_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void badSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_71b()).badSink((Object) data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        while (true) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_52c()).badSink(data);
    }





    public void badSink(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_72b()).badSink(dataVector);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_71b()).badSink((Object) data);
    }





    public String badSource() throws Throwable {
        String data;
        data = System.getenv("ADD");
        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_51b()).badSink(data);
    }





    public void bad() throws Throwable {
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_68b()).badSink();
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_75b()).badSink(dataSerialized, request, response);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        badSink(data, request, response);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_74b()).badSink(dataHashMap);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_73b()).badSink(dataLinkedList, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54d()).badSink(data);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__database_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__database_81_base {

}






    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_66b()).badSink(dataArray);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_base {

}






    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        dataBad = data;
        badSink();
    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__Environment_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_71b()).badSink((Object) data);
    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_51b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = request.getParameter("name");
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54d()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_61b()).badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (true) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54c()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        data = request.getParameter("name");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_68b()).badSink(request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_67b()).badSink(dataContainer);
    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        while (true) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_72b()).badSink(dataVector, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_22b()).badSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_67b()).badSink(dataContainer);
    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_74b()).badSink(dataHashMap);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_75b()).badSink(dataSerialized, request, response);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void badSink(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_74b()).badSink(dataHashMap);
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54c()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_53b()).badSink(data, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = System.getenv("ADD");
        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        badPublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__database_22b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        return data;
    }





    public void badSink(CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_67a.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_bad();
        baseObject.action(data, request, response);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

            break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_bad();
        baseObject.action(data);
    }





    public void bad() throws Throwable {
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_68b()).badSink();
    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54e()).badSink(data);
    }





    public void badSink(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String dataCopy; {
            String data;
            data = request.getParameter("name");
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (badPrivate) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        return data;
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_66b()).badSink(dataArray, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_74b()).badSink(dataHashMap, request, response);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_51b()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54e()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54e()).badSink(data);
    }





    public void badSink(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_67b()).badSink(dataContainer);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_66b()).badSink(dataArray);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54e()).badSink(data);
    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54b()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String badSource() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data = badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getenv("ADD");
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_66b()).badSink(dataArray);
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_51b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 == 5) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        badSink(data);
    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_22a.badPublicStatic) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = System.getProperty("user.home");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__database_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_75b()).badSink(dataSerialized, request, response);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = System.getenv("ADD");
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
            while (tokenizer.hasMoreTokens()) {
                String token = tokenizer.nextToken();
                if (token.startsWith("id="))  {
                    data = token.substring(3);
                    break;
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String dataCopy; {
            String data;
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_71b()).badSink((Object) data);
    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_52c()).badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        if (5 == 5) {
            data = ""; {
                URLConnection urlConnection = (new URL("http://www.example.org/")).openConnection();
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = ""; {
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    socket = new Socket("host.example.org", 39544);
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_67b()).badSink(dataContainer);
    }





    public void bad() throws Throwable {
        String data;
        if (true) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public String badSource() throws Throwable {
        String data;
        data = ""; {
            ServerSocket listener = null;
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                listener = new ServerSocket(39543);
                socket = listener.accept();
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

                try {
                    if (listener != null) {
                        listener.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                }

            }

        }

        return data;
    }





    public void bad() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_53d()).badSink(data);
    }





    public void badSink(String dataArray[], HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_53c()).badSink(data, request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_68b()).badSink(request, response);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = ""; {
            Cookie cookieSources[] = request.getCookies();
            if (cookieSources != null) {
                data = cookieSources[0].getValue();
            }

        }

        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_66b()).badSink(dataArray, request, response);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Socket socket = null;
            BufferedReader readerBuffered = null;
            InputStreamReader readerInputStream = null;
            try {
                socket = new Socket("host.example.org", 39544);
                readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (socket != null) {
                        socket.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                }

            }

        }

        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_75b()).badSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = request.getParameter("name");
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_52c()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                Properties properties = new Properties();
                FileInputStream streamFileInput = null;
                try {
                    streamFileInput = new FileInputStream("../common/config.properties");
                    properties.load(streamFileInput);
                    data = properties.getProperty("data");
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Properties properties = new Properties();
            FileInputStream streamFileInput = null;
            try {
                streamFileInput = new FileInputStream("../common/config.properties");
                properties.load(streamFileInput);
                data = properties.getProperty("data");
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_bad();
        baseObject.action(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        badPrivate = true;
        data = bad_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String bad_source() throws Throwable {
        String data;
        if (badPrivate) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        return data;
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_base {

}






    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_61b()).badSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54b()).badSink(data);
    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = request.getParameter("name");
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_72b()).badSink(dataVector, request, response);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_bad extends CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_base {

}






    private void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = System.getProperty("user.home");
        badSink(data);
    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            File file = new File("C:\\data.txt");
            FileInputStream streamFileInput = null;
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                streamFileInput = new FileInputStream(file);
                readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

                try {
                    if (streamFileInput != null) {
                        streamFileInput.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                }

            }

        }

        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_53b()).badSink(data);
    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = ""; {
                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), "&");
                while (tokenizer.hasMoreTokens()) {
                    String token = tokenizer.nextToken();
                    if (token.startsWith("id="))  {
                        data = token.substring(3);
                        break;
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = ""; {
                Cookie cookieSources[] = request.getCookies();
                if (cookieSources != null) {
                    data = cookieSources[0].getValue();
                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = ""; {
                Connection connection = null;
                PreparedStatement preparedStatement = null;
                ResultSet resultSet = null;
                try {
                    connection = IO.getDBConnection();
                    preparedStatement = connection.prepareStatement("select name from users where id=0");
                    resultSet = preparedStatement.executeQuery();
                    data = resultSet.getString(1);
                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
                }
 finally {
                    try {
                        if (resultSet != null) {
                            resultSet.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                    }

                    try {
                        if (connection != null) {
                            connection.close();
                        }

                    }
 catch (SQLException exceptSql) {
                        IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                    }

                }

            }

        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = ""; {
                ServerSocket listener = null;
                Socket socket = null;
                BufferedReader readerBuffered = null;
                InputStreamReader readerInputStream = null;
                try {
                    listener = new ServerSocket(39543);
                    socket = listener.accept();
                    readerInputStream = new InputStreamReader(socket.getInputStream(), "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (socket != null) {
                            socket.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing Socket", exceptIO);
                    }

                    try {
                        if (listener != null) {
                            listener.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing ServerSocket", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_53d()).badSink(data);
    }





    public void badSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__Environment_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                File file = new File("C:\\data.txt");
                FileInputStream streamFileInput = null;
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    streamFileInput = new FileInputStream(file);
                    readerInputStream = new InputStreamReader(streamFileInput, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                    try {
                        if (streamFileInput != null) {
                            streamFileInput.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing FileInputStream", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_52c()).badSink(data);
    }





    public void badSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void badSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_53d()).badSink(data);
    }





    public void badSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        if (privateTrue) {
            data = ""; {
                InputStreamReader readerInputStream = null;
                BufferedReader readerBuffered = null;
                try {
                    readerInputStream = new InputStreamReader(System.in, "UTF-8");
                    readerBuffered = new BufferedReader(readerInputStream);
                    data = readerBuffered.readLine();
                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
                }
 finally {
                    try {
                        if (readerBuffered != null) {
                            readerBuffered.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                    }

                    try {
                        if (readerInputStream != null) {
                            readerInputStream.close();
                        }

                    }
 catch (IOException exceptIO) {
                        IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                    }

                }

            }

        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            Connection connection = null;
            PreparedStatement preparedStatement = null;
            ResultSet resultSet = null;
            try {
                connection = IO.getDBConnection();
                preparedStatement = connection.prepareStatement("select name from users where id=0");
                resultSet = preparedStatement.executeQuery();
                data = resultSet.getString(1);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error with SQL statement", exceptSql);
            }
 finally {
                try {
                    if (resultSet != null) {
                        resultSet.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing ResultSet", exceptSql);
                }

                try {
                    if (preparedStatement != null) {
                        preparedStatement.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing PreparedStatement", exceptSql);
                }

                try {
                    if (connection != null) {
                        connection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

        CWE15_External_Control_of_System_or_Configuration_Setting__database_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__database_81_bad();
        baseObject.action(data);
    }





    private void badSink() throws Throwable {
        String data = dataBad;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void bad() throws Throwable {
        String data;
        data = ""; {
            InputStreamReader readerInputStream = null;
            BufferedReader readerBuffered = null;
            try {
                readerInputStream = new InputStreamReader(System.in, "UTF-8");
                readerBuffered = new BufferedReader(readerInputStream);
                data = readerBuffered.readLine();
            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error with stream reading", exceptIO);
            }
 finally {
                try {
                    if (readerBuffered != null) {
                        readerBuffered.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing BufferedReader", exceptIO);
                }

                try {
                    if (readerInputStream != null) {
                        readerInputStream.close();
                    }

                }
 catch (IOException exceptIO) {
                    IO.logger.log(Level.WARNING, "Error closing InputStreamReader", exceptIO);
                }

            }

        }

        dataBad = data;
        badSink();
    }




