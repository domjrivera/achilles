
    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_72b()).goodG2BSink(dataVector);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54e()).goodG2BSink(data);
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54d()).goodG2BSink(data);
    }





    public void goodG2BSink(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_53c()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__Property_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_53b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_base {

}






    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54e()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_53b()).goodG2BSink(data);
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_71b()).goodG2BSink((Object) data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_73b()).goodG2BSink(dataLinkedList);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_53d()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data, request, response);
    }





    public void goodG2BSink(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_51b()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_goodG2B();
        baseObject.action(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_goodG2B();
        baseObject.action(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__database_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__database_81_goodG2B();
        baseObject.action(data);
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_73b()).goodG2BSink(dataLinkedList);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_72b()).goodG2BSink(dataVector, request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_81_goodG2B();
        baseObject.action(data);
    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54b()).goodG2BSink(data);
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_53c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_71b()).goodG2BSink((Object) data);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_74b()).goodG2BSink(dataHashMap);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__File_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__File_81_base {

}






    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_52c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_67b()).goodG2BSink(dataContainer);
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__File_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_52b()).goodG2BSink(data);
    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_52c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_73b()).goodG2BSink(dataLinkedList);
    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_73b()).goodG2BSink(dataLinkedList, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_66b()).goodG2BSink(dataArray);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54e()).goodG2BSink(data);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_base {

}






    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_53d()).goodG2BSink(data);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_53d()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_52b()).goodG2BSink(data);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54d()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_71b()).goodG2BSink((Object) data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_73b()).goodG2BSink(dataLinkedList);
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_52c()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_53d()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_74b()).goodG2BSink(dataHashMap);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_52b()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_74b()).goodG2BSink(dataHashMap);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54b()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54d()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_72b()).goodG2BSink(dataVector);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54d()).goodG2BSink(data);
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_66b()).goodG2BSink(dataArray);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_66b()).goodG2BSink(dataArray, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_52c()).goodG2BSink(data);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_51b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_66b()).goodG2BSink(dataArray);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54e()).goodG2BSink(data, request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_61b()).goodG2BSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__File_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__File_81_goodG2B();
        baseObject.action(data);
    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_base {

}






    public void goodG2BSink(String dataArray[], HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_base {

}






    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__database_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_53b()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54e()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_52b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_52b()).goodG2BSink(data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_base {

}






    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_67a.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_53c()).goodG2BSink(data);
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_51b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_66b()).goodG2BSink(dataArray);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_66b()).goodG2BSink(dataArray);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54d()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_68b()).goodG2BSink();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(Object dataObject, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__database_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__database_81_base {

}






    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54b()).goodG2BSink(data);
    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__Environment_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__Environment_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_52b()).goodG2BSink(data, request, response);
    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54e()).goodG2BSink(data, request, response);
    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_53c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_52b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54d()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54e()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_52b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54c()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_72b()).goodG2BSink(dataVector);
    }





    public void goodG2BSink(String dataArray[], HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54d()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_71b()).goodG2BSink((Object) data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_52c()).goodG2BSink(data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_67b()).goodG2BSink(dataContainer, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__Property_81_goodG2B();
        baseObject.action(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54b()).goodG2BSink(data);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_74b()).goodG2BSink(dataHashMap, request, response);
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_75b()).goodG2BSink(dataSerialized, request, response);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_74b()).goodG2BSink(dataHashMap);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_68b()).goodG2BSink();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_53b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_72b()).goodG2BSink(dataVector);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_53d()).goodG2BSink(data);
    }





    public void goodG2BSink(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_53b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__File_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__File_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_74b()).goodG2BSink(dataHashMap);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink(request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_66b()).goodG2BSink(dataArray, request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_51b()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String dataArray[], HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_53b()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54d()).goodG2BSink(data);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_51b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_67b()).goodG2BSink(dataContainer);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_53c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__database_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__database_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__database_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_73b()).goodG2BSink(dataLinkedList);
    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_22b()).goodG2B1Source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_22b()).goodG2B2Source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__Property_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__Property_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_51b()).goodG2BSink(data);
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_71b()).goodG2BSink((Object) data, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_52b()).goodG2BSink(data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_66b()).goodG2BSink(dataArray);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_goodG2B();
        baseObject.action(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_73b()).goodG2BSink(dataLinkedList);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54c()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_53d()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_53d()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54b()).goodG2BSink(data);
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_71b()).goodG2BSink((Object) data, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54c()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_54b()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_51b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_53d()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54e()).goodG2BSink(data);
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_53b()).goodG2BSink(data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_51b()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_52c()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_71b()).goodG2BSink((Object) data);
    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54d()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data, request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_67b()).goodG2BSink(dataContainer, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_68b()).goodG2BSink();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_71b()).goodG2BSink((Object) data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_53c()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__Environment_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_53b()).goodG2BSink(data);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54c()).goodG2BSink(data);
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_74b()).goodG2BSink(dataHashMap);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_53d()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_53d()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_22b()).goodG2B1Source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_22b()).goodG2B2Source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_67b()).goodG2BSink(dataContainer);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_68b()).goodG2BSink(request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_72b()).goodG2BSink(dataVector, request, response);
    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_68b()).goodG2BSink();
    }





    public void goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_52c()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_base {

}






    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_75b()).goodG2BSink(dataSerialized, request, response);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_67b()).goodG2BSink(dataContainer);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_53c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_74b()).goodG2BSink(dataHashMap);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_73b()).goodG2BSink(dataLinkedList, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_67b()).goodG2BSink(dataContainer, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__database_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__database_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_68b()).goodG2BSink(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__File_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_81_goodG2B();
        baseObject.action(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_72b()).goodG2BSink(dataVector);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public String goodG2B1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_67a.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_67b()).goodG2BSink(dataContainer);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_53c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_73b()).goodG2BSink(dataLinkedList);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_68b()).goodG2BSink();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_72b()).goodG2BSink(dataVector);
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_67a.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2BSink(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54e()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_53c()).goodG2BSink(data, request, response);
    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_53b()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_61b()).goodG2BSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_53b()).goodG2BSink(data);
    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_52c()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_53b()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void goodG2BSink(Object dataObject, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_73b()).goodG2BSink(dataLinkedList);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_66b()).goodG2BSink(dataArray);
    }





    public void goodG2BSink(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_66b()).goodG2BSink(dataArray);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_72b()).goodG2BSink(dataVector);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54c()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = goodG2BSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_81_goodG2B();
        baseObject.action(data);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_81_base {

}






    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_52b()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_51b()).goodG2BSink(data);
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_66b()).goodG2BSink(dataArray);
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_72b()).goodG2BSink(dataVector);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_22b()).goodG2B1Source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_22b()).goodG2B2Source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_52b()).goodG2BSink(data);
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54d()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_71b()).goodG2BSink((Object) data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_54c()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54d()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_71b()).goodG2BSink((Object) data, request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_81_goodG2B();
        baseObject.action(data, request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(byte[] dataSerialized) throws Throwable {
        ByteArrayInputStream streamByteArrayInput = null;
        ObjectInputStream streamObjectInput = null;
        try {
            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);
            streamObjectInput = new ObjectInputStream(streamByteArrayInput);
            String data = (String) streamObjectInput.readObject();
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in deserialization", exceptIO);
        }
 catch (ClassNotFoundException exceptClassNotFound) {
            IO.logger.log(Level.WARNING, "ClassNotFoundException in deserialization", exceptClassNotFound);
        }
 finally {
            try {
                if (streamObjectInput != null) {
                    streamObjectInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectInputStream", exceptIO);
            }

            try {
                if (streamByteArrayInput != null) {
                    streamByteArrayInput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayInputStream", exceptIO);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_81_goodG2B();
        baseObject.action(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_54c()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_61b()).goodG2BSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_54c()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_67b()).goodG2BSink(dataContainer);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(LinkedList<String> dataLinkedList) throws Throwable {
        String data = dataLinkedList.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__Property_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (privateTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_74b()).goodG2BSink(dataHashMap);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_68b()).goodG2BSink();
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_74b()).goodG2BSink(dataHashMap);
    }





    private String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = goodG2BSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_54e()).goodG2BSink(data);
    }





    public String goodG2B1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void goodG2BSink() throws Throwable {
        String data = CWE15_External_Control_of_System_or_Configuration_Setting__database_68a.data;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_52b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_53c()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_54d()).goodG2BSink(data);
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_68b()).goodG2BSink(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54b()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_54e()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__database_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_73b()).goodG2BSink(dataLinkedList);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_53d()).goodG2BSink(data);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_53c()).goodG2BSink(data);
    }





    private String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = goodG2BSource(request, response);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Environment_54b()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B() throws Throwable {
        String data;
        while (true) {
            data = "foo";
            break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data = (new CWE15_External_Control_of_System_or_Configuration_Setting__File_61b()).goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_67b()).goodG2BSink(dataContainer);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__console_readLine_68b()).goodG2BSink();
    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_74b()).goodG2BSink(dataHashMap, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_71b()).goodG2BSink((Object) data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_81_base {

}






    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_53c()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        LinkedList<String> dataLinkedList = new LinkedList<String>();
        dataLinkedList.add(0, data);
        dataLinkedList.add(1, data);
        dataLinkedList.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_73b()).goodG2BSink(dataLinkedList, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_52c()).goodG2BSink(data, request, response);
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (5 != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (5 == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_53b()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_52c()).goodG2BSink(data, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_68b()).goodG2BSink();
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_81_base {

}






    public void goodG2BSink(Object dataObject, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_52c()).goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1_private = false;
        data = goodG2B1_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B1_source() throws Throwable {
        String data = null;
        if (goodG2B1_private) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2_private = true;
        data = goodG2B2_source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2B2_source() throws Throwable {
        String data = null;
        if (goodG2B2_private) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (privateFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (privateFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__database_54b()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticReturnsFalse()) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticReturnsTrue()) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_51b()).goodG2BSink(data);
    }





    public String goodG2B1Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source() throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_67b()).goodG2BSink(dataContainer);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_base baseObject = new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_goodG2B();
        baseObject.action(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFive != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticFive == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(Object dataObject) throws Throwable {
        String data = (String) dataObject;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String dataArray[]) throws Throwable {
        String data = dataArray[2];
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();
        dataHashMap.put(0, data);
        dataHashMap.put(1, data);
        dataHashMap.put(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_74b()).goodG2BSink(dataHashMap, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_53d()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public String goodG2BSource(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_54c()).goodG2BSink(data);
    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_54c()).goodG2BSink(data, request, response);
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_75b()).goodG2BSink(dataSerialized, request, response);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        if (IO.staticReturnsTrueOrFalse()) {
            data = "foo";
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        goodG2BSink(data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2BSink() throws Throwable {
        String data = dataGoodG2B;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        dataGoodG2B = data;
        goodG2BSink();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_51b()).goodG2BSink(data, request, response);
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__listen_tcp_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    public void goodG2BSink(Vector<String> dataVector) throws Throwable {
        String data = dataVector.remove(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B1() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        String[] dataArray = new String[5];
        dataArray[2] = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getCookies_Servlet_66b()).goodG2BSink(dataArray, request, response);
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        for (int i = 0; i < 1; i++) {
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_71b()).goodG2BSink((Object) data);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_68b()).goodG2BSink();
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FALSE) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_TRUE) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__connect_tcp_52c()).goodG2BSink(data);
    }





    private void goodG2B1() throws Throwable {
        String data;
        if (false) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (true) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__File_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private String goodG2BSource() throws Throwable {
        String data;
        data = "foo";
        return data;
    }





    private void goodG2B() throws Throwable {
        String data = goodG2BSource();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B1(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE != 5) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (PRIVATE_STATIC_FINAL_FIVE == 5) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B1(request, response);
        goodG2B2(request, response);
    }





    public String goodG2B1Source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_22a.goodG2B1PublicStatic) {
            data = null;
        }
 else {
            data = "foo";
        }

        return data;
    }





    public String goodG2B2Source(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        if (CWE15_External_Control_of_System_or_Configuration_Setting__getParameter_Servlet_22a.goodG2B2PublicStatic) {
            data = "foo";
        }
 else {
            data = null;
        }

        return data;
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Container dataContainer = new Container();
        dataContainer.containerOne = data;
        (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_67b()).goodG2BSink(dataContainer);
    }




package testcases.CWE15_External_Control_of_System_or_Configuration_Setting;
import testcasesupport.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.logging.Level;
public class CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_goodG2B extends CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_81_base {

}






    private void goodG2B1() throws Throwable {
        String data;
        if (IO.staticFalse) {
            data = null;
        }
 else {
            data = "foo";
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        if (IO.staticTrue) {
            data = "foo";
        }
 else {
            data = null;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void goodG2BSink(String data) throws Throwable {
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        ByteArrayOutputStream streamByteArrayOutput = null;
        ObjectOutput outputObject = null;
        try {
            streamByteArrayOutput = new ByteArrayOutputStream();
            outputObject = new ObjectOutputStream(streamByteArrayOutput);
            outputObject.writeObject(data);
            byte[] dataSerialized = streamByteArrayOutput.toByteArray();
            (new CWE15_External_Control_of_System_or_Configuration_Setting__URLConnection_75b()).goodG2BSink(dataSerialized);
        }
 catch (IOException exceptIO) {
            IO.logger.log(Level.WARNING, "IOException in serialization", exceptIO);
        }
 finally {
            try {
                if (outputObject != null) {
                    outputObject.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ObjectOutputStream", exceptIO);
            }

            try {
                if (streamByteArrayOutput != null) {
                    streamByteArrayOutput.close();
                }

            }
 catch (IOException exceptIO) {
                IO.logger.log(Level.WARNING, "Error closing ByteArrayOutputStream", exceptIO);
            }

        }

    }





    public void goodG2BSink(String data) throws Throwable {
        (new CWE15_External_Control_of_System_or_Configuration_Setting__File_54e()).goodG2BSink(data);
    }





    public void goodG2BSink(HashMap<Integer, String> dataHashMap) throws Throwable {
        String data = dataHashMap.get(2);
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_72b()).goodG2BSink(dataVector, request, response);
    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String data;
        data = "foo";
        Vector<String> dataVector = new Vector<String>(5);
        dataVector.add(0, data);
        dataVector.add(1, data);
        dataVector.add(2, data);
        (new CWE15_External_Control_of_System_or_Configuration_Setting__PropertiesFile_72b()).goodG2BSink(dataVector);
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__File_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__File_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void goodG2BSink(CWE15_External_Control_of_System_or_Configuration_Setting__Environment_67a.Container dataContainer) throws Throwable {
        String data = dataContainer.containerOne;
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B();
    }





    private void goodG2B() throws Throwable {
        String dataCopy; {
            String data;
            data = "foo";
            dataCopy = data;
        }
 {
            String data = dataCopy;
            Connection dbConnection = null;
            try {
                dbConnection = IO.getDBConnection();
                dbConnection.setCatalog(data);
            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
            }
 finally {
                try {
                    if (dbConnection != null) {
                        dbConnection.close();
                    }

                }
 catch (SQLException exceptSql) {
                    IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
                }

            }

        }

    }





    public void good(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        goodG2B(request, response);
    }





    private void goodG2B(HttpServletRequest request, HttpServletResponse response) throws Throwable {
        String data;
        data = "foo";
        (new CWE15_External_Control_of_System_or_Configuration_Setting__getQueryString_Servlet_51b()).goodG2BSink(data, request, response);
    }





    private void goodG2B1() throws Throwable {
        String data = null;
        switch (5) {
            case 6:
                data = null;
                break;
            default:
                data = "foo";
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data = null;
        switch (6) {
            case 6:
                data = "foo";
                break;
            default:
                data = null;
                break;
        }

        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    public void good() throws Throwable {
        goodG2B1();
        goodG2B2();
    }





    private void goodG2B1() throws Throwable {
        String data;
        goodG2B1PublicStatic = false;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_22b()).goodG2B1Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }





    private void goodG2B2() throws Throwable {
        String data;
        goodG2B2PublicStatic = true;
        data = (new CWE15_External_Control_of_System_or_Configuration_Setting__Property_22b()).goodG2B2Source();
        Connection dbConnection = null;
        try {
            dbConnection = IO.getDBConnection();
            dbConnection.setCatalog(data);
        }
 catch (SQLException exceptSql) {
            IO.logger.log(Level.WARNING, "Error getting database connection", exceptSql);
        }
 finally {
            try {
                if (dbConnection != null) {
                    dbConnection.close();
                }

            }
 catch (SQLException exceptSql) {
                IO.logger.log(Level.WARNING, "Error closing Connection", exceptSql);
            }

        }

    }




